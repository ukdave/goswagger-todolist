// Code generated by go-swagger;

package restapi

import (
	"crypto/tls"
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	swag "github.com/go-openapi/swag"
	graceful "github.com/tylerb/graceful"

	"github.com/ukdave/goswagger-todolist/gen/models"
	"github.com/ukdave/goswagger-todolist/gen/restapi/operations"
	"github.com/ukdave/goswagger-todolist/gen/restapi/operations/items"
	"github.com/ukdave/goswagger-todolist/todolist"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target ../gen --name todo --spec ../swagger.yaml --exclude-main

var todoList = todolist.NewList()

func configureFlags(api *operations.TodoAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func configureAPI(api *operations.TodoAPI) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	api.ItemsAddOneHandler = items.AddOneHandlerFunc(func(params items.AddOneParams) middleware.Responder {
		if err := todoList.AddItem(params.Body); err != nil {
			return items.NewAddOneDefault(500).WithPayload(&models.Error{Code: 500, Message: swag.String(err.Error())})
		}
		return items.NewAddOneCreated().WithPayload(params.Body)
	})
	api.ItemsDestroyOneHandler = items.DestroyOneHandlerFunc(func(params items.DestroyOneParams) middleware.Responder {
		if err := todoList.DeleteItem(params.ID); err != nil {
			return items.NewDestroyOneDefault(500).WithPayload(&models.Error{Code: 500, Message: swag.String(err.Error())})
		}
		return items.NewDestroyOneNoContent()
	})
	api.ItemsFindHandler = items.FindHandlerFunc(func(params items.FindParams) middleware.Responder {
		return items.NewFindOK().WithPayload(todoList.AllItems(int(swag.Int32Value(params.Limit))))
	})
	api.ItemsGetOneHandler = items.GetOneHandlerFunc(func(params items.GetOneParams) middleware.Responder {
		item := todoList.GetItem(params.ID)
		if item == nil {
			return items.NewGetOneDefault(404).WithPayload(&models.Error{Code: 404, Message: swag.String(fmt.Sprintf("not found: item %d", params.ID))})
		}
		return items.NewGetOneOK().WithPayload(item)
	})
	api.ItemsUpdateOneHandler = items.UpdateOneHandlerFunc(func(params items.UpdateOneParams) middleware.Responder {
		if err := todoList.UpdateItem(params.ID, params.Body); err != nil {
			return items.NewUpdateOneDefault(500).WithPayload(&models.Error{Code: 500, Message: swag.String(err.Error())})
		}
		return items.NewUpdateOneOK().WithPayload(params.Body)
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return uiMiddleware(handler)
}

func uiMiddleware(handler http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		if !strings.HasPrefix(r.URL.Path, "/api") && !strings.HasPrefix(r.URL.Path, "/swagger.json") {
			http.FileServer(http.Dir("static")).ServeHTTP(w, r)
			return
		}
		handler.ServeHTTP(w, r)
	})
}
